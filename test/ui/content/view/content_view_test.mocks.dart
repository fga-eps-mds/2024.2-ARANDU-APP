// Mocks generated by Mockito 5.4.4 from annotations
// in aranduapp/test/ui/content/view/content_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:ui' as _i8;

import 'package:aranduapp/core/state/command.dart' as _i3;
import 'package:aranduapp/ui/content/model/content_request.dart' as _i6;
import 'package:aranduapp/ui/content/viewmodel/content_viewmodel.dart' as _i5;
import 'package:async/async.dart' as _i4;
import 'package:flutter/material.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeScrollController_0 extends _i1.SmartFake
    implements _i2.ScrollController {
  _FakeScrollController_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCommand1_1<T, A> extends _i1.SmartFake
    implements _i3.Command1<T, A> {
  _FakeCommand1_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResult_2<T> extends _i1.SmartFake implements _i4.Result<T> {
  _FakeResult_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ContentViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockContentViewModel extends _i1.Mock implements _i5.ContentViewModel {
  @override
  _i2.ScrollController get scrollController => (super.noSuchMethod(
        Invocation.getter(#scrollController),
        returnValue: _FakeScrollController_0(
          this,
          Invocation.getter(#scrollController),
        ),
        returnValueForMissingStub: _FakeScrollController_0(
          this,
          Invocation.getter(#scrollController),
        ),
      ) as _i2.ScrollController);

  @override
  _i3.Command1<_i6.ContentRequest, String> get contentCommand =>
      (super.noSuchMethod(
        Invocation.getter(#contentCommand),
        returnValue: _FakeCommand1_1<_i6.ContentRequest, String>(
          this,
          Invocation.getter(#contentCommand),
        ),
        returnValueForMissingStub: _FakeCommand1_1<_i6.ContentRequest, String>(
          this,
          Invocation.getter(#contentCommand),
        ),
      ) as _i3.Command1<_i6.ContentRequest, String>);

  @override
  set contentCommand(
          _i3.Command1<_i6.ContentRequest, String>? _contentCommand) =>
      super.noSuchMethod(
        Invocation.setter(
          #contentCommand,
          _contentCommand,
        ),
        returnValueForMissingStub: null,
      );

  @override
  double get progress => (super.noSuchMethod(
        Invocation.getter(#progress),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  bool get shouldShowButton => (super.noSuchMethod(
        Invocation.getter(#shouldShowButton),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  int get wordCount => (super.noSuchMethod(
        Invocation.getter(#wordCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  String get estimatedReadingTime => (super.noSuchMethod(
        Invocation.getter(#estimatedReadingTime),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#estimatedReadingTime),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#estimatedReadingTime),
        ),
      ) as String);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Command1].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommand1 extends _i1.Mock
    implements _i3.Command1<_i6.ContentRequest, String> {
  @override
  _i9.Future<_i4.Result<_i6.ContentRequest>> Function(String) get action =>
      (super.noSuchMethod(
        Invocation.getter(#action),
        returnValue: (String __p0) =>
            _i9.Future<_i4.Result<_i6.ContentRequest>>.value(
                _FakeResult_2<_i6.ContentRequest>(
          this,
          Invocation.getter(#action),
        )),
        returnValueForMissingStub: (String __p0) =>
            _i9.Future<_i4.Result<_i6.ContentRequest>>.value(
                _FakeResult_2<_i6.ContentRequest>(
          this,
          Invocation.getter(#action),
        )),
      ) as _i9.Future<_i4.Result<_i6.ContentRequest>> Function(String));

  @override
  bool get isError => (super.noSuchMethod(
        Invocation.getter(#isError),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isOk => (super.noSuchMethod(
        Invocation.getter(#isOk),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get running => (super.noSuchMethod(
        Invocation.getter(#running),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i9.Future<_i4.Result<_i6.ContentRequest>> execute(String? arg1) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [arg1],
        ),
        returnValue: _i9.Future<_i4.Result<_i6.ContentRequest>>.value(
            _FakeResult_2<_i6.ContentRequest>(
          this,
          Invocation.method(
            #execute,
            [arg1],
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i4.Result<_i6.ContentRequest>>.value(
                _FakeResult_2<_i6.ContentRequest>(
          this,
          Invocation.method(
            #execute,
            [arg1],
          ),
        )),
      ) as _i9.Future<_i4.Result<_i6.ContentRequest>>);

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
