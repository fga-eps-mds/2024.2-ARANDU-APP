// Mocks generated by Mockito 5.4.4 from annotations
// in aranduapp/test/ui/subjects/view/subjects_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i7;

import 'package:aranduapp/core/state/command.dart' as _i2;
import 'package:aranduapp/ui/subjects/model/subject_model.dart' as _i5;
import 'package:aranduapp/ui/subjects/viewmodel/subjects_viewmodel.dart' as _i4;
import 'package:async/async.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCommand1_0<T, A> extends _i1.SmartFake
    implements _i2.Command1<T, A> {
  _FakeCommand1_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResult_1<T> extends _i1.SmartFake implements _i3.Result<T> {
  _FakeResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SubjectsViewmodel].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubjectsViewmodel extends _i1.Mock implements _i4.SubjectsViewmodel {
  @override
  List<_i5.SubjectModel> get subjects => (super.noSuchMethod(
        Invocation.getter(#subjects),
        returnValue: <_i5.SubjectModel>[],
        returnValueForMissingStub: <_i5.SubjectModel>[],
      ) as List<_i5.SubjectModel>);

  @override
  set subjects(List<_i5.SubjectModel>? _subjects) => super.noSuchMethod(
        Invocation.setter(
          #subjects,
          _subjects,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Command1<List<_i5.SubjectModel>, String> get subjectCommand =>
      (super.noSuchMethod(
        Invocation.getter(#subjectCommand),
        returnValue: _FakeCommand1_0<List<_i5.SubjectModel>, String>(
          this,
          Invocation.getter(#subjectCommand),
        ),
        returnValueForMissingStub:
            _FakeCommand1_0<List<_i5.SubjectModel>, String>(
          this,
          Invocation.getter(#subjectCommand),
        ),
      ) as _i2.Command1<List<_i5.SubjectModel>, String>);

  @override
  set subjectCommand(
          _i2.Command1<List<_i5.SubjectModel>, String>? _subjectCommand) =>
      super.noSuchMethod(
        Invocation.setter(
          #subjectCommand,
          _subjectCommand,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Command1<bool, String> get isUserSUbscribedCommand => (super.noSuchMethod(
        Invocation.getter(#isUserSUbscribedCommand),
        returnValue: _FakeCommand1_0<bool, String>(
          this,
          Invocation.getter(#isUserSUbscribedCommand),
        ),
        returnValueForMissingStub: _FakeCommand1_0<bool, String>(
          this,
          Invocation.getter(#isUserSUbscribedCommand),
        ),
      ) as _i2.Command1<bool, String>);

  @override
  set isUserSUbscribedCommand(
          _i2.Command1<bool, String>? _isUserSUbscribedCommand) =>
      super.noSuchMethod(
        Invocation.setter(
          #isUserSUbscribedCommand,
          _isUserSUbscribedCommand,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i6.Future<_i3.Result<List<_i5.SubjectModel>>> getSubject(
          String? knowledgeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSubject,
          [knowledgeId],
        ),
        returnValue: _i6.Future<_i3.Result<List<_i5.SubjectModel>>>.value(
            _FakeResult_1<List<_i5.SubjectModel>>(
          this,
          Invocation.method(
            #getSubject,
            [knowledgeId],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Result<List<_i5.SubjectModel>>>.value(
                _FakeResult_1<List<_i5.SubjectModel>>(
          this,
          Invocation.method(
            #getSubject,
            [knowledgeId],
          ),
        )),
      ) as _i6.Future<_i3.Result<List<_i5.SubjectModel>>>);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
